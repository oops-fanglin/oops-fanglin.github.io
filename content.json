{"meta":{"title":"( •̀ ω •́ )✧","subtitle":"","description":"","author":"方林","url":"http://example.com","root":"/"},"pages":[{"title":"","date":"2020-11-23T02:48:50.354Z","updated":"2020-11-23T02:48:50.354Z","comments":true,"path":"404.html","permalink":"http://example.com/404.html","excerpt":"","text":"404 很抱歉，您访问的页面不存在 可能是输入地址有误或该地址已被删除"},{"title":"","date":"2020-11-23T02:45:23.927Z","updated":"2020-11-23T02:45:23.927Z","comments":true,"path":"about/index.html","permalink":"http://example.com/about/index.html","excerpt":"","text":"下面写关于自己的内容"},{"title":"所有分类","date":"2020-11-23T02:46:07.609Z","updated":"2020-11-23T02:46:07.609Z","comments":true,"path":"categories/index.html","permalink":"http://example.com/categories/index.html","excerpt":"","text":""},{"title":"","date":"2020-11-23T03:18:48.319Z","updated":"2020-11-23T03:18:48.319Z","comments":true,"path":"js/click-love.js","permalink":"http://example.com/js/click-love.js","excerpt":"","text":"! function (e, t, a) { function n() { c(\".heart{width: 10px;height: 10px;position: fixed;background: #f00;transform: rotate(45deg);-webkit-transform: rotate(45deg);-moz-transform: rotate(45deg);}.heart:after,.heart:before{content: '';width: inherit;height: inherit;background: inherit;border-radius: 50%;-webkit-border-radius: 50%;-moz-border-radius: 50%;position: fixed;}.heart:after{top: -5px;}.heart:before{left: -5px;}\"), o(), r() } function r() { for (var e = 0; e < d.length; e++) d[e].alpha"},{"title":"","date":"2020-11-23T02:47:31.636Z","updated":"2020-11-23T02:47:31.636Z","comments":true,"path":"mylist/index.html","permalink":"http://example.com/mylist/index.html","excerpt":"","text":""},{"title":"所有标签","date":"2020-11-23T02:46:54.666Z","updated":"2020-11-23T02:46:54.666Z","comments":true,"path":"tags/index.html","permalink":"http://example.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"","slug":"LeetCode刷题","date":"2020-11-30T07:58:58.580Z","updated":"2020-11-30T09:16:16.704Z","comments":true,"path":"2020/11/30/LeetCode刷题/","link":"","permalink":"http://example.com/2020/11/30/LeetCode%E5%88%B7%E9%A2%98/","excerpt":"","text":"title:LeetCode刷题队列最近的请求次数题目描述：写一个 RecentCounter 类来计算特定时间范围内最近的请求。 请你实现 RecentCounter 类： RecentCounter() 初始化计数器，请求数为 0 。int ping(int t) 在时间 t 添加一个新请求，其中 t 表示以毫秒为单位的某个时间，并返回过去 3000 毫秒内发生的所有请求数（包括新请求）。确切地说，返回在 [t-3000, t] 内发生的请求数。保证 每次对 ping 的调用都使用比之前更大的 t 值。 示例： 输入：[“RecentCounter”, “ping”, “ping”, “ping”, “ping”][[], [1], [100], [3001], [3002]]输出：[null, 1, 2, 3, 3] 解释：RecentCounter recentCounter = new RecentCounter();recentCounter.ping(1); // requests = [1]，范围是 [-2999,1]，返回 1recentCounter.ping(100); // requests = [1, 100]，范围是 [-2900,100]，返回 2recentCounter.ping(3001); // requests = [1, 100, 3001]，范围是 [1,3001]，返回 3recentCounter.ping(3002); // requests = [1, 100, 3001, 3002]，范围是 [2,3002]，返回 3 提示： 1 &lt;= t &lt;= 109保证每次对 ping 调用所使用的 t 值都 严格递增至多调用 ping 方法 104 次 解读：这题看了官方解析才知道什么意思。 题目有点脑筋急转弯的意思，你需要有一个记录请求的队列，队列里面的元素是每次输入的t，每次输入都会将t插入队列，并且将t和之前的t 作比较，统计并返回队列中的t在[t-3000,t]中的数 123456789101112131415161718192021public class RecentCounter &#123; Queue&lt;Integer&gt; queue; public RecentCounter()&#123; queue = new LinkedList&lt;&gt;(); &#125; /** * 首先加入队列，queue.add()，很好理解 * 然后查看队列第一个值是不是小于3000了，queue.peek() * 如果小于3000则移除改元素，因为题目中说t是递增的，所以不满足条件的可以直接删除 * 最后得到的队列就是符合条件的队列了，返回商长度即可 */ public int ping (int t)&#123; queue.add(t); while(queue.peek() &lt; t - 3000)&#123; queue.poll(); &#125; return queue.size(); &#125;&#125; 删除中间节点题目实现一种算法，删除单向链表中间的某个节点（即不是第一个或最后一个节点），假定你只能访问该节点。 示例： 输入：单向链表a-&gt;b-&gt;c-&gt;d-&gt;e-&gt;f中的节点c 结果：不返回任何数据，但该链表变为a-&gt;b-&gt;d-&gt;e-&gt;f 解读这不是将链表头传进来，而是将要移动的节点传进来，我们需要写的是很基本的链表节点删除操作而已，由于题目指出节点不会是尾节点所以不用考虑越界问题 123456789101112public class DeleteNodeInMiddle &#123; public void solution(ListNode node)&#123; node.val = node.next.val; node.next = node.next.next; &#125;&#125;class ListNode &#123; int val; ListNode next; ListNode(int x) &#123; val = x; &#125;&#125;","categories":[],"tags":[]},{"title":"article title","slug":"article-title","date":"2020-11-20T07:08:11.000Z","updated":"2020-11-20T07:08:11.679Z","comments":true,"path":"2020/11/20/article-title/","link":"","permalink":"http://example.com/2020/11/20/article-title/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"Hello World","slug":"hello-world","date":"2020-11-20T06:59:21.009Z","updated":"2020-11-20T06:59:21.009Z","comments":true,"path":"2020/11/20/hello-world/","link":"","permalink":"http://example.com/2020/11/20/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}],"categories":[],"tags":[]}